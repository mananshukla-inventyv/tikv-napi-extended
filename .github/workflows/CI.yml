name: CI
env:
  DEBUG: napi:*
  APP_NAME: tikv-napi-extended
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: macos-latest
          #   target: x86_64-apple-darwin
          #   build: yarn build --target x86_64-apple-darwin
          # - host: windows-latest
          #   build: yarn build --target x86_64-pc-windows-msvc
          #   target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: RUST_BACKTRACE=1 yarn build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: yarn build --target x86_64-unknown-linux-musl
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: yarn
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Install OpenSSL and Protobuf on macOS
        if: matrix.settings.host == 'macos-latest'
        run: |
          brew install openssl@1.1
          brew install protobuf
        env:
          OPENSSL_DIR: /usr/local/opt/openssl@1.1
          OPENSSL_LIB_DIR: /usr/local/opt/openssl@1.1/lib
          OPENSSL_INCLUDE_DIR: /usr/local/opt/openssl@1.1/include
          OPENSSL_NO_VENDOR: 1

      - name: Install OpenSSL and Protobuf on Ubuntu
        if: matrix.settings.host == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y cmake libclang-dev
          sudo apt install -y openssl
          sudo apt install -y libprotobuf-dev
          sudo apt install -y protobuf-compiler
      - name: Install OpenSSL and Protobuf on Windows
        if: matrix.settings.host == 'windows-latest'
        run: |
          choco install openssl.light
          choco install protoc
        env:
          OPENSSL_DIR: C:\\Program Files\\OpenSSL-Win64
          OPENSSL_LIB_DIR: C:\\Program Files\\OpenSSL-Win64\\lib
          OPENSSL_INCLUDE_DIR: C:\\Program Files\\OpenSSL-Win64\\include
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.11.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: yarn
          architecture: x86

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          # options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: |
            if [ "${{ matrix.settings.target }}" = "x86_64-unknown-linux-musl" ] || [ "${{ matrix.settings.target }}" = "x86_64-alpine-linux-musl" ]; then
             apk add --no-cache nodejs npm yarn rust cargo openssl-dev perl make musl-dev gcc
             export OPENSSL_DIR=/usr
             export OPENSSL_STATIC=1
            fi
            which protoc
            ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
